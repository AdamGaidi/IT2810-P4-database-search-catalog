# source: http://localhost:4466
# timestamp: Sun Nov 04 2018 17:58:09 GMT+0100 (CET)

type AggregatePokemon {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createPokemon(data: PokemonCreateInput!): Pokemon!
  updatePokemon(data: PokemonUpdateInput!, where: PokemonWhereUniqueInput!): Pokemon
  deletePokemon(where: PokemonWhereUniqueInput!): Pokemon
  upsertPokemon(where: PokemonWhereUniqueInput!, create: PokemonCreateInput!, update: PokemonUpdateInput!): Pokemon!
  updateManyPokemons(data: PokemonUpdateInput!, where: PokemonWhereInput): BatchPayload!
  deleteManyPokemons(where: PokemonWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Pokemon implements Node {
  id: ID!
  name: String!
  types: [String!]!
  img: String!
  stars: Int!
}

"""A connection to a list of items."""
type PokemonConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PokemonEdge]!
  aggregate: AggregatePokemon!
}

input PokemonCreateInput {
  name: String!
  img: String!
  stars: Int!
  types: PokemonCreatetypesInput
}

input PokemonCreatetypesInput {
  set: [String!]
}

"""An edge in a connection."""
type PokemonEdge {
  """The item at the end of the edge."""
  node: Pokemon!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PokemonOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  img_ASC
  img_DESC
  stars_ASC
  stars_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PokemonPreviousValues {
  id: ID!
  name: String!
  types: [String!]!
  img: String!
  stars: Int!
}

type PokemonSubscriptionPayload {
  mutation: MutationType!
  node: Pokemon
  updatedFields: [String!]
  previousValues: PokemonPreviousValues
}

input PokemonSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PokemonSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PokemonSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PokemonSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PokemonWhereInput
}

input PokemonUpdateInput {
  name: String
  img: String
  stars: Int
  types: PokemonUpdatetypesInput
}

input PokemonUpdatetypesInput {
  set: [String!]
}

input PokemonWhereInput {
  """Logical AND on all given filters."""
  AND: [PokemonWhereInput!]

  """Logical OR on all given filters."""
  OR: [PokemonWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PokemonWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  img: String

  """All values that are not equal to given value."""
  img_not: String

  """All values that are contained in given list."""
  img_in: [String!]

  """All values that are not contained in given list."""
  img_not_in: [String!]

  """All values less than the given value."""
  img_lt: String

  """All values less than or equal the given value."""
  img_lte: String

  """All values greater than the given value."""
  img_gt: String

  """All values greater than or equal the given value."""
  img_gte: String

  """All values containing the given string."""
  img_contains: String

  """All values not containing the given string."""
  img_not_contains: String

  """All values starting with the given string."""
  img_starts_with: String

  """All values not starting with the given string."""
  img_not_starts_with: String

  """All values ending with the given string."""
  img_ends_with: String

  """All values not ending with the given string."""
  img_not_ends_with: String
  stars: Int

  """All values that are not equal to given value."""
  stars_not: Int

  """All values that are contained in given list."""
  stars_in: [Int!]

  """All values that are not contained in given list."""
  stars_not_in: [Int!]

  """All values less than the given value."""
  stars_lt: Int

  """All values less than or equal the given value."""
  stars_lte: Int

  """All values greater than the given value."""
  stars_gt: Int

  """All values greater than or equal the given value."""
  stars_gte: Int
}

input PokemonWhereUniqueInput {
  id: ID
}

type Query {
  pokemons(where: PokemonWhereInput, orderBy: PokemonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Pokemon]!
  pokemon(where: PokemonWhereUniqueInput!): Pokemon
  pokemonsConnection(where: PokemonWhereInput, orderBy: PokemonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PokemonConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  pokemon(where: PokemonSubscriptionWhereInput): PokemonSubscriptionPayload
}
